1.6 - Representación en Memoria (`&`, `*`, punteros)
=====================================================

Introducción
------------
Toda variable en C se guarda en una posición específica de la memoria RAM. Para interactuar con esa dirección usamos el operador `&`.

```c
int a = 10;
printf("Dirección de a: %p\n", &a);
```

Punteros
--------
Un puntero es una variable que guarda la dirección de otra variable.

```c
int *p;
int a = 10;
p = &a;
```

### Acceder al contenido apuntado

```c
printf("%d", *p);  // Muestra el valor de a
```

Operadores Clave
----------------
| Operador | Función                                  |
|----------|-------------------------------------------|
| `&x`     | Dirección de memoria de la variable `x`   |
| `*p`     | Valor al que apunta el puntero `p`        |

Tamaño
------
```c
int *p;
sizeof(p);     // Tamaño del puntero (dirección) = 8 bytes
sizeof(*p);    // Tamaño del valor apuntado = 4 bytes si es int
```

Aplicaciones
------------
- Intercambio de variables
- Paso por referencia
- Manipulación de arreglos
- Manejo de memoria dinámica

Resumen
-------
- Las variables tienen una dirección
- Los punteros apuntan a esa dirección
- El operador `*` accede al valor contenido
